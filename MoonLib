local MoonLib = {Version = "4.0"}
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")

-- Настройки тем
local Themes = {
    Aurora = {
        Main = Color3.fromRGB(25, 28, 42),
        Secondary = Color3.fromRGB(35, 40, 60),
        Text = Color3.fromRGB(230, 235, 255),
        Accent = Color3.fromRGB(100, 150, 255),
        Shadow = Color3.fromRGB(15, 20, 30),
        ScrollBar = Color3.fromRGB(80, 130, 220),
        Slider = Color3.fromRGB(70, 120, 210),
        Toggle = Color3.fromRGB(90, 140, 230),
        Dropdown = Color3.fromRGB(45, 50, 70),
        Divider = Color3.fromRGB(60, 70, 90),
        Warning = Color3.fromRGB(255, 120, 100),
        Success = Color3.fromRGB(100, 220, 150),
        Input = Color3.fromRGB(35, 40, 55),
        Overlay = Color3.fromRGB(20, 25, 35)
    },
    Midnight = {
        Main = Color3.fromRGB(20, 22, 30),
        Secondary = Color3.fromRGB(30, 33, 45),
        Text = Color3.fromRGB(220, 225, 240),
        Accent = Color3.fromRGB(120, 80, 220),
        Shadow = Color3.fromRGB(10, 12, 20),
        ScrollBar = Color3.fromRGB(100, 80, 200),
        Slider = Color3.fromRGB(90, 70, 190),
        Toggle = Color3.fromRGB(110, 90, 210),
        Dropdown = Color3.fromRGB(40, 45, 60),
        Divider = Color3.fromRGB(50, 55, 70),
        Warning = Color3.fromRGB(220, 100, 100),
        Success = Color3.fromRGB(90, 200, 120),
        Input = Color3.fromRGB(30, 35, 50),
        Overlay = Color3.fromRGB(15, 20, 30)
    }
}

MoonLib.Theme = "Aurora"
MoonLib.WindowMinimizeKey = Enum.KeyCode.RightAlt
MoonLib.Visible = true
MoonLib.Configs = {}
MoonLib.CurrentConfig = "Default"
MoonLib.Transparency = 0
MoonLib.MaxTransparency = 0.5 -- Максимальная прозрачность

-- Утилиты
local function RippleEffect(button, color)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.BackgroundColor3 = color or Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.ZIndex = 10
    ripple.Parent = button
    
    local mouse = game:GetService("Players").LocalPlayer:GetMouse()
    local pos = Vector2.new(mouse.X - button.AbsolutePosition.X, mouse.Y - button.AbsolutePosition.Y)
    ripple.Position = UDim2.new(0, pos.X, 0, pos.Y)
    
    local tween = TweenService:Create(
        ripple,
        TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {
            BackgroundTransparency = 1,
            Size = UDim2.new(0, button.AbsoluteSize.X*2, 0, button.AbsoluteSize.X*2),
            Position = UDim2.new(0.5, -button.AbsoluteSize.X, 0.5, -button.AbsoluteSize.X)
        }
    )
    
    tween:Play()
    tween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

local function RoundCorners(obj, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 6)
    corner.Parent = obj
    return corner
end

local function UpdateTransparency(window, transparency)
    for _, element in pairs(window:GetDescendants()) do
        if element:IsA("Frame") and element.BackgroundTransparency < 1 then
            element.BackgroundTransparency = element:GetAttribute("BaseTransparency") or 0 + transparency
        elseif element:IsA("TextLabel") or element:IsA("TextButton") or element:IsA("TextBox") then
            element.TextTransparency = transparency
        elseif element:IsA("ImageLabel") or element:IsA("ImageButton") then
            element.ImageTransparency = transparency
        end
    end
end

-- Основные функции
function MoonLib.SetTheme(themeName)
    if Themes[themeName] then
        MoonLib.Theme = themeName
        -- Здесь будет обновление всех элементов GUI при смене темы
    else
        warn("Тема '"..themeName.."' не найдена. Используется тема по умолчанию.")
    end
end

function MoonLib.SaveConfig(configName)
    MoonLib.Configs[configName] = {
        Theme = MoonLib.Theme,
        Transparency = MoonLib.Transparency,
        WindowMinimizeKey = MoonLib.WindowMinimizeKey
        -- Здесь можно добавить другие настройки для сохранения
    }
    MoonLib.CurrentConfig = configName
end

function MoonLib.LoadConfig(configName)
    if MoonLib.Configs[configName] then
        local config = MoonLib.Configs[configName]
        MoonLib.SetTheme(config.Theme)
        MoonLib.Transparency = config.Transparency
        MoonLib.WindowMinimizeKey = config.WindowMinimizeKey
        MoonLib.CurrentConfig = configName
        return true
    end
    return false
end

function MoonLib.CreateWindow(title, subtitle)
    local currentTheme = Themes[MoonLib.Theme]
    
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TopBar = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local Subtitle = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local MinimizeButton = Instance.new("TextButton")
    local TabsContainer = Instance.new("Frame")
    local UIListLayout = Instance.new("UIListLayout")
    local ContentContainer = Instance.new("ScrollingFrame")
    local ContentLayout = Instance.new("UIListLayout")
    local ResizeHandle = Instance.new("Frame")
    
    -- Настройка ScreenGui
    ScreenGui.Name = "MoonLibGUI"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false
    
    -- Настройка MainFrame
    MainFrame.Name = "MainFrame"
    MainFrame.BackgroundColor3 = currentTheme.Main
    MainFrame.BackgroundTransparency = MoonLib.Transparency
    MainFrame:SetAttribute("BaseTransparency", 0)
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.3, 0, 0.2, 0)
    MainFrame.Size = UDim2.new(0, 450, 0, 500)
    MainFrame.ClipsDescendants = true
    RoundCorners(MainFrame, 12)
    
    -- Тень
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0, -15, 0, -15)
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.ZIndex = -1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = currentTheme.Shadow
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Parent = MainFrame
    
    -- Верхняя панель
    TopBar.Name = "TopBar"
    TopBar.BackgroundColor3 = currentTheme.Secondary
    TopBar.BackgroundTransparency = MoonLib.Transparency
    TopBar:SetAttribute("BaseTransparency", 0)
    TopBar.BorderSizePixel = 0
    TopBar.Size = UDim2.new(1, 0, 0, 60)
    RoundCorners(TopBar, 12)
    TopBar.ZIndex = 2
    
    -- Заголовок
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.TextTransparency = MoonLib.Transparency
    Title.Position = UDim2.new(0, 15, 0, 10)
    Title.Size = UDim2.new(1, -30, 0, 24)
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = title or "MoonLib Window"
    Title.TextColor3 = currentTheme.Text
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Подзаголовок
    Subtitle.Name = "Subtitle"
    Subtitle.BackgroundTransparency = 1
    Subtitle.TextTransparency = MoonLib.Transparency
    Subtitle.Position = UDim2.new(0, 15, 0, 34)
    Subtitle.Size = UDim2.new(1, -30, 0, 16)
    Subtitle.Font = Enum.Font.Gotham
    Subtitle.Text = subtitle or ""
    Subtitle.TextColor3 = Color3.fromRGB(180, 190, 220)
    Subtitle.TextSize = 12
    Subtitle.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Кнопка закрытия
    CloseButton.Name = "CloseButton"
    CloseButton.BackgroundColor3 = currentTheme.Secondary
    CloseButton.BackgroundTransparency = MoonLib.Transparency
    CloseButton:SetAttribute("BaseTransparency", 0)
    CloseButton.BorderSizePixel = 0
    CloseButton.Position = UDim2.new(1, -70, 0, 10)
    CloseButton.Size = UDim2.new(0, 25, 0, 25)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Text = "×"
    CloseButton.TextColor3 = currentTheme.Text
    CloseButton.TextTransparency = MoonLib.Transparency
    CloseButton.TextSize = 20
    CloseButton.ZIndex = 2
    RoundCorners(CloseButton, 6)
    
    -- Кнопка сворачивания
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.BackgroundColor3 = currentTheme.Secondary
    MinimizeButton.BackgroundTransparency = MoonLib.Transparency
    MinimizeButton:SetAttribute("BaseTransparency", 0)
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.Position = UDim2.new(1, -40, 0, 10)
    MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
    MinimizeButton.Font = Enum.Font.GothamBold
    MinimizeButton.Text = "-"
    MinimizeButton.TextColor3 = currentTheme.Text
    MinimizeButton.TextTransparency = MoonLib.Transparency
    MinimizeButton.TextSize = 20
    MinimizeButton.ZIndex = 2
    RoundCorners(MinimizeButton, 6)
    
    -- Контейнер вкладок
    TabsContainer.Name = "TabsContainer"
    TabsContainer.BackgroundColor3 = currentTheme.Secondary
    TabsContainer.BackgroundTransparency = MoonLib.Transparency
    TabsContainer:SetAttribute("BaseTransparency", 0)
    TabsContainer.BorderSizePixel = 0
    TabsContainer.Position = UDim2.new(0, 10, 0, 65)
    TabsContainer.Size = UDim2.new(1, -20, 0, 30)
    TabsContainer.ZIndex = 2
    RoundCorners(TabsContainer, 8)
    
    UIListLayout.Parent = TabsContainer
    UIListLayout.FillDirection = Enum.FillDirection.Horizontal
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    
    -- Контейнер контента
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Active = true
    ContentContainer.BackgroundColor3 = currentTheme.Main
    ContentContainer.BackgroundTransparency = MoonLib.Transparency
    ContentContainer:SetAttribute("BaseTransparency", 0)
    ContentContainer.BorderSizePixel = 0
    ContentContainer.Position = UDim2.new(0, 10, 0, 105)
    ContentContainer.Size = UDim2.new(1, -20, 1, -115)
    ContentContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    ContentContainer.ScrollBarThickness = 5
    ContentContainer.ScrollBarImageColor3 = currentTheme.ScrollBar
    ContentContainer.ScrollBarImageTransparency = 0.5 + MoonLib.Transparency/2
    
    ContentLayout.Parent = ContentContainer
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 10)
    
    -- Ручка изменения размера
    ResizeHandle.Name = "ResizeHandle"
    ResizeHandle.BackgroundColor3 = currentTheme.Accent
    ResizeHandle.BackgroundTransparency = 0.8 + MoonLib.Transparency/2
    ResizeHandle.BorderSizePixel = 0
    ResizeHandle.Position = UDim2.new(1, -15, 1, -15)
    ResizeHandle.Size = UDim2.new(0, 15, 0, 15)
    ResizeHandle.ZIndex = 2
    RoundCorners(ResizeHandle, 4)
    
    -- Сборка интерфейса
    TopBar.Parent = MainFrame
    Title.Parent = TopBar
    Subtitle.Parent = TopBar
    CloseButton.Parent = TopBar
    MinimizeButton.Parent = TopBar
    TabsContainer.Parent = MainFrame
    ContentContainer.Parent = MainFrame
    ResizeHandle.Parent = MainFrame
    MainFrame.Parent = ScreenGui
    
    -- Функционал перетаскивания
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Функционал изменения размера
    local resizing
    local resizeInput
    local resizeStart
    local startSize
    
    ResizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = true
            resizeStart = input.Position
            startSize = MainFrame.Size
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    resizing = false
                end
            end)
        end
    end)
    
    ResizeHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            resizeInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == resizeInput and resizing then
            local delta = input.Position - resizeStart
            local newSize = UDim2.new(
                startSize.X.Scale, 
                math.max(350, startSize.X.Offset + delta.X), 
                startSize.Y.Scale, 
                math.max(250, startSize.Y.Offset + delta.Y)
            )
            MainFrame.Size = newSize
        end
    end)
    
    -- Функционал кнопок
    CloseButton.MouseEnter:Connect(function()
        TweenService:Create(
            CloseButton,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = Color3.fromRGB(255, 60, 60)}
        ):Play()
    end)
    
    CloseButton.MouseLeave:Connect(function()
        TweenService:Create(
            CloseButton,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = currentTheme.Secondary}
        ):Play()
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    MinimizeButton.MouseEnter:Connect(function()
        TweenService:Create(
            MinimizeButton,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = currentTheme.Accent}
        ):Play()
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        TweenService:Create(
            MinimizeButton,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = currentTheme.Secondary}
        ):Play()
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        ContentContainer.Visible = not ContentContainer.Visible
        TabsContainer.Visible = not TabsContainer.Visible
        
        if ContentContainer.Visible then
            TweenService:Create(
                MainFrame,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = UDim2.new(MainFrame.Size.X.Scale, MainFrame.Size.X.Offset, 0, 500)}
            ):Play()
        else
            TweenService:Create(
                MainFrame,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = UDim2.new(MainFrame.Size.X.Scale, MainFrame.Size.X.Offset, 0, 60)}
            ):Play()
        end
    end)
    
    -- Горячая клавиша для сворачивания
    UserInputService.InputBegan:Connect(function(input, processed)
        if not processed and input.KeyCode == MoonLib.WindowMinimizeKey then
            MinimizeButton.MouseButton1Click:Fire()
        end
    end)
    
    local window = {}
    local tabs = {}
    
    -- Функция добавления вкладки
    function window:AddTab(tabName)
        local currentTheme = Themes[MoonLib.Theme]
        
        local TabButton = Instance.new("TextButton")
        local TabContent = Instance.new("ScrollingFrame")
        local TabContentLayout = Instance.new("UIListLayout")
        
        -- Настройка кнопки вкладки
        TabButton.Name = tabName
        TabButton.BackgroundColor3 = currentTheme.Secondary
        TabButton.BackgroundTransparency = MoonLib.Transparency
        TabButton:SetAttribute("BaseTransparency", 0)
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(0, 100, 0.8, 0)
        TabButton.Font = Enum.Font.GothamSemibold
        TabButton.Text = tabName
        TabButton.TextColor3 = currentTheme.Text
        TabButton.TextTransparency = MoonLib.Transparency
        TabButton.TextSize = 12
        TabButton.AutoButtonColor = false
        TabButton.ZIndex = 2
        RoundCorners(TabButton, 6)
        
        -- Настройка контента вкладки
        TabContent.Name = tabName
        TabContent.Active = true
        TabContent.BackgroundColor3 = currentTheme.Main
        TabContent.BackgroundTransparency = MoonLib.Transparency
        TabContent:SetAttribute("BaseTransparency", 0)
        TabContent.BorderSizePixel = 0
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.ScrollBarThickness = 5
        TabContent.ScrollBarImageColor3 = currentTheme.ScrollBar
        TabContent.ScrollBarImageTransparency = 0.5 + MoonLib.Transparency/2
        TabContent.Visible = false
        
        TabContentLayout.Parent = TabContent
        TabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabContentLayout.Padding = UDim.new(0, 10)
        
        TabButton.Parent = TabsContainer
        TabContent.Parent = ContentContainer
        
        local tab = {}
        
        -- Функция добавления секции
        function tab:AddSection(title)
            local section = {}
            
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Name = "SectionFrame"
            SectionFrame.BackgroundTransparency = 1
            SectionFrame.Size = UDim2.new(1, 0, 0, 0)
            SectionFrame.AutomaticSize = Enum.AutomaticSize.Y
            
            local SectionLabel = Instance.new("TextLabel")
            SectionLabel.Name = "SectionLabel"
            SectionLabel.BackgroundTransparency = 1
            SectionLabel.TextTransparency = MoonLib.Transparency
            SectionLabel.Position = UDim2.new(0, 0, 0, 0)
            SectionLabel.Size = UDim2.new(1, 0, 0, 20)
            SectionLabel.Font = Enum.Font.GothamSemibold
            SectionLabel.Text = title
            SectionLabel.TextColor3 = currentTheme.Text
            SectionLabel.TextSize = 14
            SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
            SectionLabel.Parent = SectionFrame
            
            local SectionContent = Instance.new("Frame")
            SectionContent.Name = "SectionContent"
            SectionContent.BackgroundTransparency = 1
            SectionContent.Position = UDim2.new(0, 0, 0, 25)
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            
            local SectionLayout = Instance.new("UIListLayout")
            SectionLayout.Parent = SectionContent
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Padding = UDim.new(0, 5)
            
            SectionContent.Parent = SectionFrame
            SectionFrame.Parent = TabContent
            
            -- Функция добавления кнопки
            function section:AddButton(text, callback)
                local ButtonFrame = Instance.new("Frame")
                ButtonFrame.BackgroundTransparency = 1
                ButtonFrame.Size = UDim2.new(1, 0, 0, 30)
                
                local Button = Instance.new("TextButton")
                Button.Name = text
                Button.BackgroundColor3 = currentTheme.Secondary
                Button.BackgroundTransparency = MoonLib.Transparency
                Button:SetAttribute("BaseTransparency", 0)
                Button.BorderSizePixel = 0
                Button.Size = UDim2.new(1, 0, 1, 0)
                Button.Font = Enum.Font.GothamSemibold
                Button.Text = text
                Button.TextColor3 = currentTheme.Text
                Button.TextTransparency = MoonLib.Transparency
                Button.TextSize = 12
                Button.AutoButtonColor = false
                RoundCorners(Button, 6)
                
                Button.MouseButton1Click:Connect(function()
                    RippleEffect(Button, currentTheme.Accent)
                    if callback then callback() end
                end)
                
                Button.MouseEnter:Connect(function()
                    TweenService:Create(
                        Button,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundColor3 = currentTheme.Accent}
                    ):Play()
                end)
                
                Button.MouseLeave:Connect(function()
                    TweenService:Create(
                        Button,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundColor3 = currentTheme.Secondary}
                    ):Play()
                end)
                
                Button.Parent = ButtonFrame
                ButtonFrame.Parent = SectionContent
                
                return {
                    SetText = function(self, newText)
                        Button.Text = newText
                    end,
                    SetCallback = function(self, newCallback)
                        callback = newCallback
                    end
                }
            end
            
            -- Улучшенная функция добавления переключателя
            function section:AddToggle(text, default, callback)
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.BackgroundTransparency = 1
                ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Name = "ToggleButton"
                ToggleButton.BackgroundColor3 = currentTheme.Secondary
                ToggleButton.BackgroundTransparency = MoonLib.Transparency
                ToggleButton:SetAttribute("BaseTransparency", 0)
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Position = UDim2.new(0, 0, 0.5, -12)
                ToggleButton.Size = UDim2.new(0, 40, 0, 24)
                ToggleButton.Font = Enum.Font.SourceSans
                ToggleButton.Text = ""
                ToggleButton.AutoButtonColor = false
                RoundCorners(ToggleButton, 12)
                
                local ToggleIndicator = Instance.new("Frame")
                ToggleIndicator.Name = "ToggleIndicator"
                ToggleIndicator.BackgroundColor3 = currentTheme.Toggle
                ToggleIndicator.BorderSizePixel = 0
                ToggleIndicator.Position = UDim2.new(0, 2, 0.5, -10)
                ToggleIndicator.Size = UDim2.new(0, 20, 0, 20)
                ToggleIndicator.Visible = default or false
                RoundCorners(ToggleIndicator, 10)
                
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Name = "ToggleLabel"
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.TextTransparency = MoonLib.Transparency
                ToggleLabel.Position = UDim2.new(0, 50, 0, 0)
                ToggleLabel.Size = UDim2.new(1, -50, 1, 0)
                ToggleLabel.Font = Enum.Font.Gotham
                ToggleLabel.Text = text
                ToggleLabel.TextColor3 = currentTheme.Text
                ToggleLabel.TextSize = 12
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleIndicator.Parent = ToggleButton
                ToggleButton.Parent = ToggleFrame
                ToggleLabel.Parent = ToggleFrame
                ToggleFrame.Parent = SectionContent
                
                local toggled = default or false
                
                local function updateToggle()
                    if toggled then
                        TweenService:Create(
                            ToggleIndicator,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Position = UDim2.new(1, -22, 0.5, -10)}
                        ):Play()
                        TweenService:Create(
                            ToggleButton,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundColor3 = Color3.fromRGB(
                                currentTheme.Toggle.R * 255 * 0.3 + currentTheme.Secondary.R * 255 * 0.7,
                                currentTheme.Toggle.G * 255 * 0.3 + currentTheme.Secondary.G * 255 * 0.7,
                                currentTheme.Toggle.B * 255 * 0.3 + currentTheme.Secondary.B * 255 * 0.7
                            ) / 255}
                        ):Play()
                    else
                        TweenService:Create(
                            ToggleIndicator,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Position = UDim2.new(0, 2, 0.5, -10)}
                        ):Play()
                        TweenService:Create(
                            ToggleButton,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundColor3 = currentTheme.Secondary}
                        ):Play()
                    end
                end
                
                updateToggle()
                
                ToggleButton.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    updateToggle()
                    if callback then callback(toggled) end
                end)
                
                return {
                    Set = function(self, state)
                        toggled = state
                        updateToggle()
                    end,
                    Get = function(self)
                        return toggled
                    end
                }
            end
            
            -- Улучшенная функция добавления слайдера
            function section:AddSlider(text, min, max, default, callback)
                local SliderFrame = Instance.new("Frame")
                SliderFrame.BackgroundTransparency = 1
                SliderFrame.Size = UDim2.new(1, 0, 0, 50)
                
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Name = "SliderLabel"
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.TextTransparency = MoonLib.Transparency
                SliderLabel.Position = UDim2.new(0, 0, 0, 0)
                SliderLabel.Size = UDim2.new(1, 0, 0, 20)
                SliderLabel.Font = Enum.Font.Gotham
                SliderLabel.Text = text
                SliderLabel.TextColor3 = currentTheme.Text
                SliderLabel.TextSize = 12
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                SliderLabel.Parent = SliderFrame
                
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "SliderValue"
                SliderValue.BackgroundTransparency = 1
                SliderValue.TextTransparency = MoonLib.Transparency
                SliderValue.Position = UDim2.new(0.5, 0, 0, 0)
                SliderValue.Size = UDim2.new(0.5, 0, 0, 20)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(default or min)
                SliderValue.TextColor3 = currentTheme.Text
                SliderValue.TextSize = 12
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                SliderValue.Parent = SliderFrame
                
                local SliderTrack = Instance.new("Frame")
                SliderTrack.Name = "SliderTrack"
                SliderTrack.BackgroundColor3 = currentTheme.Secondary
                SliderTrack.BackgroundTransparency = MoonLib.Transparency
                SliderTrack:SetAttribute("BaseTransparency", 0)
                SliderTrack.BorderSizePixel = 0
                SliderTrack.Position = UDim2.new(0, 0, 0, 25)
                SliderTrack.Size = UDim2.new(1, 0, 0, 6)
                RoundCorners(SliderTrack, 3)
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "SliderFill"
                SliderFill.BackgroundColor3 = currentTheme.Slider
                SliderFill.BorderSizePixel = 0
                SliderFill.Position = UDim2.new(0, 0, 0, 0)
                SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                RoundCorners(SliderFill, 3)
                
                local SliderButton = Instance.new("TextButton")
                SliderButton.Name = "SliderButton"
                SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderButton.BackgroundTransparency = 1
                SliderButton.BorderSizePixel = 0
                SliderButton.Position = UDim2.new((default - min) / (max - min), -8, 0, -5)
                SliderButton.Size = UDim2.new(0, 16, 0, 16)
                SliderButton.Font = Enum.Font.SourceSans
                SliderButton.Text = ""
                SliderButton.ZIndex = 2
                RoundCorners(SliderButton, 8)
                
                local SliderButtonVisual = Instance.new("Frame")
                SliderButtonVisual.Name = "SliderButtonVisual"
                SliderButtonVisual.BackgroundColor3 = currentTheme.Slider
                SliderButtonVisual.BorderSizePixel = 0
                SliderButtonVisual.Position = UDim2.new(0.5, -6, 0.5, -6)
                SliderButtonVisual.Size = UDim2.new(0, 12, 0, 12)
                SliderButtonVisual.ZIndex = 3
                RoundCorners(SliderButtonVisual, 6)
                
                SliderFill.Parent = SliderTrack
                SliderButtonVisual.Parent = SliderButton
                SliderButton.Parent = SliderTrack
                SliderTrack.Parent = SliderFrame
                SliderFrame.Parent = SectionContent
                
                local sliding = false
                local value = default or min
                
                local function updateSlider(input)
                    local relativeX = (input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X
                    relativeX = math.clamp(relativeX, 0, 1)
                    
                    value = math.floor(min + (max - min) * relativeX)
                    SliderValue.Text = tostring(value)
                    SliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
                    SliderButton.Position = UDim2.new(relativeX, -8, 0, -5)
                    
                    if callback then callback(value) end
                end
                
                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = true
                        updateSlider(input)
                    end
                end)
                
                SliderButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = false
                    end
                end)
                
                SliderTrack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = true
                        updateSlider(input)
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if sliding and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input)
                    end
                end)
                
                return {
                    Set = function(self, newValue)
                        value = math.clamp(newValue, min, max)
                        SliderValue.Text = tostring(value)
                        local relativeX = (value - min) / (max - min)
                        SliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
                        SliderButton.Position = UDim2.new(relativeX, -8, 0, -5)
                    end,
                    Get = function(self)
                        return value
                    end
                }
            end
            
            -- Улучшенная функция добавления выпадающего списка
            function section:AddDropdown(text, options, default, callback)
                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.BackgroundTransparency = 1
                DropdownFrame.Size = UDim2.new(1, 0, 0, 60)
                
                local DropdownLabel = Instance.new("TextLabel")
                DropdownLabel.Name = "DropdownLabel"
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.TextTransparency = MoonLib.Transparency
                DropdownLabel.Position = UDim2.new(0, 0, 0, 0)
                DropdownLabel.Size = UDim2.new(1, 0, 0, 20)
                DropdownLabel.Font = Enum.Font.Gotham
                DropdownLabel.Text = text
                DropdownLabel.TextColor3 = currentTheme.Text
                DropdownLabel.TextSize = 12
                DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                DropdownLabel.Parent = DropdownFrame
                
                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Name = "DropdownButton"
                DropdownButton.BackgroundColor3 = currentTheme.Dropdown
                DropdownButton.BackgroundTransparency = MoonLib.Transparency
                DropdownButton:SetAttribute("BaseTransparency", 0)
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Position = UDim2.new(0, 0, 0, 25)
                DropdownButton.Size = UDim2.new(1, 0, 0, 25)
                DropdownButton.Font = Enum.Font.SourceSans
                DropdownButton.Text = ""
                DropdownButton.AutoButtonColor = false
                RoundCorners(DropdownButton, 6)
                
                local DropdownValue = Instance.new("TextLabel")
                DropdownValue.Name = "DropdownValue"
                DropdownValue.BackgroundTransparency = 1
                DropdownValue.TextTransparency = MoonLib.Transparency
                DropdownValue.Position = UDim2.new(0, 10, 0, 0)
                DropdownValue.Size = UDim2.new(1, -30, 1, 0)
                DropdownValue.Font = Enum.Font.Gotham
                DropdownValue.Text = default or options[1] or ""
                DropdownValue.TextColor3 = currentTheme.Text
                DropdownValue.TextSize = 12
                DropdownValue.TextXAlignment = Enum.TextXAlignment.Left
                DropdownValue.Parent = DropdownButton
                
                local DropdownArrow = Instance.new("ImageLabel")
                DropdownArrow.Name = "DropdownArrow"
                DropdownArrow.BackgroundTransparency = 1
                DropdownArrow.ImageTransparency = MoonLib.Transparency
                DropdownArrow.Position = UDim2.new(1, -20, 0.5, -5)
                DropdownArrow.Size = UDim2.new(0, 10, 0, 10)
                DropdownArrow.Image = "rbxassetid://6031090990"
                DropdownArrow.ImageColor3 = currentTheme.Text
                DropdownArrow.Parent = DropdownButton
                
                -- Создаем оверлей для выпадающего списка
                local DropdownOverlay = Instance.new("Frame")
                DropdownOverlay.Name = "DropdownOverlay"
                DropdownOverlay.BackgroundColor3 = currentTheme.Overlay
                DropdownOverlay.BackgroundTransparency = 0.2
                DropdownOverlay.BorderSizePixel = 0
                DropdownOverlay.Size = UDim2.new(1, 0, 1, 0)
                DropdownOverlay.Position = UDim2.new(0, 0, 0, 0)
                DropdownOverlay.Visible = false
                DropdownOverlay.ZIndex = 10
                DropdownOverlay.Parent = ScreenGui
                
                local DropdownList = Instance.new("ScrollingFrame")
                DropdownList.Name = "DropdownList"
                DropdownList.Active = true
                DropdownList.BackgroundColor3 = currentTheme.Dropdown
                DropdownList.BackgroundTransparency = MoonLib.Transparency
                DropdownList:SetAttribute("BaseTransparency", 0)
                DropdownList.BorderSizePixel = 0
                DropdownList.Size = UDim2.new(0, DropdownButton.AbsoluteSize.X, 0, 0)
                DropdownList.Position = UDim2.new(
                    0, DropdownButton.AbsolutePosition.X - ScreenGui.AbsolutePosition.X,
                    0, DropdownButton.AbsolutePosition.Y - ScreenGui.AbsolutePosition.Y + DropdownButton.AbsoluteSize.Y
                )
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
                DropdownList.ScrollBarThickness = 5
                DropdownList.ScrollBarImageColor3 = currentTheme.ScrollBar
                DropdownList.ScrollBarImageTransparency = 0.5 + MoonLib.Transparency/2
                DropdownList.Visible = false
                DropdownList.ZIndex = 11
                RoundCorners(DropdownList, 6)
                
                local DropdownListLayout = Instance.new("UIListLayout")
                DropdownListLayout.Name = "DropdownListLayout"
                DropdownListLayout.Parent = DropdownList
                DropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownListLayout.Padding = UDim.new(0, 2)
                
                DropdownButton.Parent = DropdownFrame
                DropdownList.Parent = ScreenGui
                DropdownFrame.Parent = SectionContent
                
                local selected = default or options[1]
                local isOpen = false
                
                local function toggleDropdown()
                    isOpen = not isOpen
                    
                    if isOpen then
                        DropdownOverlay.Visible = true
                        DropdownList.Visible = true
                        TweenService:Create(
                            DropdownList,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, DropdownButton.AbsoluteSize.X, 0, math.min(#options * 30, 150))}
                        ):Play()
                        TweenService:Create(
                            DropdownArrow,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Rotation = 180}
                        ):Play()
                    else
                        TweenService:Create(
                            DropdownList,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, DropdownButton.AbsoluteSize.X, 0, 0)}
                        ):Play()
                        TweenService:Create(
                            DropdownArrow,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Rotation = 0}
                        ):Play()
                        wait(0.2)
                        DropdownList.Visible = false
                        DropdownOverlay.Visible = false
                    end
                end
                
                DropdownButton.MouseButton1Click:Connect(toggleDropdown)
                
                DropdownOverlay.MouseButton1Click:Connect(function()
                    if isOpen then toggleDropdown() end
                end)
                
                -- Создание элементов списка
                for i, option in ipairs(options) do
                    local OptionButton = Instance.new("TextButton")
                    
                    OptionButton.Name = option
                    OptionButton.BackgroundColor3 = currentTheme.Dropdown
                    OptionButton.BackgroundTransparency = MoonLib.Transparency
                    OptionButton:SetAttribute("BaseTransparency", 0)
                    OptionButton.BorderSizePixel = 0
                    OptionButton.Size = UDim2.new(1, 0, 0, 30)
                    OptionButton.Font = Enum.Font.Gotham
                    OptionButton.Text = option
                    OptionButton.TextColor3 = currentTheme.Text
                    OptionButton.TextTransparency = MoonLib.Transparency
                    OptionButton.TextSize = 12
                    OptionButton.TextXAlignment = Enum.TextXAlignment.Left
                    OptionButton.AutoButtonColor = false
                    OptionButton.ZIndex = 12
                    RoundCorners(OptionButton, 0)
                    
                    OptionButton.MouseEnter:Connect(function()
                        TweenService:Create(
                            OptionButton,
                            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundTransparency = MoonLib.Transparency * 0.5}
                        ):Play()
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        TweenService:Create(
                            OptionButton,
                            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundTransparency = MoonLib.Transparency}
                        ):Play()
                    end)
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        selected = option
                        DropdownValue.Text = option
                        toggleDropdown()
                        if callback then callback(option) end
                    end)
                    
                    OptionButton.Parent = DropdownList
                end
                
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, #options * 30)
                
                return {
                    Set = function(self, value)
                        if table.find(options, value) then
                            selected = value
                            DropdownValue.Text = value
                        end
                    end,
                    Get = function(self)
                        return selected
                    end
                }
            end
            
            -- Функция добавления мультивыпадающего списка
            function section:AddMultiDropdown(text, options, default, callback)
                local MultiDropdownFrame = Instance.new("Frame")
                MultiDropdownFrame.BackgroundTransparency = 1
                MultiDropdownFrame.Size = UDim2.new(1, 0, 0, 60)
                
                local MultiDropdownLabel = Instance.new("TextLabel")
                MultiDropdownLabel.Name = "MultiDropdownLabel"
                MultiDropdownLabel.BackgroundTransparency = 1
                MultiDropdownLabel.TextTransparency = MoonLib.Transparency
                MultiDropdownLabel.Position = UDim2.new(0, 0, 0, 0)
                MultiDropdownLabel.Size = UDim2.new(1, 0, 0, 20)
                MultiDropdownLabel.Font = Enum.Font.Gotham
                MultiDropdownLabel.Text = text
                MultiDropdownLabel.TextColor3 = currentTheme.Text
                MultiDropdownLabel.TextSize = 12
                MultiDropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                MultiDropdownLabel.Parent = MultiDropdownFrame
                
                local MultiDropdownButton = Instance.new("TextButton")
                MultiDropdownButton.Name = "MultiDropdownButton"
                MultiDropdownButton.BackgroundColor3 = currentTheme.Dropdown
                MultiDropdownButton.BackgroundTransparency = MoonLib.Transparency
                MultiDropdownButton:SetAttribute("BaseTransparency", 0)
                MultiDropdownButton.BorderSizePixel = 0
                MultiDropdownButton.Position = UDim2.new(0, 0, 0, 25)
                MultiDropdownButton.Size = UDim2.new(1, 0, 0, 25)
                MultiDropdownButton.Font = Enum.Font.SourceSans
                MultiDropdownButton.Text = ""
                MultiDropdownButton.AutoButtonColor = false
                RoundCorners(MultiDropdownButton, 6)
                
                local MultiDropdownValue = Instance.new("TextLabel")
                MultiDropdownValue.Name = "MultiDropdownValue"
                MultiDropdownValue.BackgroundTransparency = 1
                MultiDropdownValue.TextTransparency = MoonLib.Transparency
                MultiDropdownValue.Position = UDim2.new(0, 10, 0, 0)
                MultiDropdownValue.Size = UDim2.new(1, -30, 1, 0)
                MultiDropdownValue.Font = Enum.Font.Gotham
                MultiDropdownValue.Text = table.concat(default or {options[1]}, ", ") or ""
                MultiDropdownValue.TextColor3 = currentTheme.Text
                MultiDropdownValue.TextSize = 12
                MultiDropdownValue.TextXAlignment = Enum.TextXAlignment.Left
                MultiDropdownValue.Parent = MultiDropdownButton
                
                local MultiDropdownArrow = Instance.new("ImageLabel")
                MultiDropdownArrow.Name = "MultiDropdownArrow"
                MultiDropdownArrow.BackgroundTransparency = 1
                MultiDropdownArrow.ImageTransparency = MoonLib.Transparency
                MultiDropdownArrow.Position = UDim2.new(1, -20, 0.5, -5)
                MultiDropdownArrow.Size = UDim2.new(0, 10, 0, 10)
                MultiDropdownArrow.Image = "rbxassetid://6031090990"
                MultiDropdownArrow.ImageColor3 = currentTheme.Text
                MultiDropdownArrow.Parent = MultiDropdownButton
                
                -- Оверлей для мультивыпадающего списка
                local MultiDropdownOverlay = Instance.new("Frame")
                MultiDropdownOverlay.Name = "MultiDropdownOverlay"
                MultiDropdownOverlay.BackgroundColor3 = currentTheme.Overlay
                MultiDropdownOverlay.BackgroundTransparency = 0.2
                MultiDropdownOverlay.BorderSizePixel = 0
                MultiDropdownOverlay.Size = UDim2.new(1, 0, 1, 0)
                MultiDropdownOverlay.Position = UDim2.new(0, 0, 0, 0)
                MultiDropdownOverlay.Visible = false
                MultiDropdownOverlay.ZIndex = 10
                MultiDropdownOverlay.Parent = ScreenGui
                
                local MultiDropdownList = Instance.new("ScrollingFrame")
                MultiDropdownList.Name = "MultiDropdownList"
                MultiDropdownList.Active = true
                MultiDropdownList.BackgroundColor3 = currentTheme.Dropdown
                MultiDropdownList.BackgroundTransparency = MoonLib.Transparency
                MultiDropdownList:SetAttribute("BaseTransparency", 0)
                MultiDropdownList.BorderSizePixel = 0
                MultiDropdownList.Size = UDim2.new(0, MultiDropdownButton.AbsoluteSize.X, 0, 0)
                MultiDropdownList.Position = UDim2.new(
                    0, MultiDropdownButton.AbsolutePosition.X - ScreenGui.AbsolutePosition.X,
                    0, MultiDropdownButton.AbsolutePosition.Y - ScreenGui.AbsolutePosition.Y + MultiDropdownButton.AbsoluteSize.Y
                )
                MultiDropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
                MultiDropdownList.ScrollBarThickness = 5
                MultiDropdownList.ScrollBarImageColor3 = currentTheme.ScrollBar
                MultiDropdownList.ScrollBarImageTransparency = 0.5 + MoonLib.Transparency/2
                MultiDropdownList.Visible = false
                MultiDropdownList.ZIndex = 11
                RoundCorners(MultiDropdownList, 6)
                
                local MultiDropdownListLayout = Instance.new("UIListLayout")
                MultiDropdownListLayout.Name = "MultiDropdownListLayout"
                MultiDropdownListLayout.Parent = MultiDropdownList
                MultiDropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                MultiDropdownListLayout.Padding = UDim.new(0, 2)
                
                MultiDropdownButton.Parent = MultiDropdownFrame
                MultiDropdownList.Parent = ScreenGui
                MultiDropdownFrame.Parent = SectionContent
                
                local selected = default or {options[1]}
                local isOpen = false
                
                local function toggleDropdown()
                    isOpen = not isOpen
                    
                    if isOpen then
                        MultiDropdownOverlay.Visible = true
                        MultiDropdownList.Visible = true
                        TweenService:Create(
                            MultiDropdownList,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, MultiDropdownButton.AbsoluteSize.X, 0, math.min(#options * 30, 150))}
                        ):Play()
                        TweenService:Create(
                            MultiDropdownArrow,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Rotation = 180}
                        ):Play()
                    else
                        TweenService:Create(
                            MultiDropdownList,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, MultiDropdownButton.AbsoluteSize.X, 0, 0)}
                        ):Play()
                        TweenService:Create(
                            MultiDropdownArrow,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Rotation = 0}
                        ):Play()
                        wait(0.2)
                        MultiDropdownList.Visible = false
                        MultiDropdownOverlay.Visible = false
                    end
                end
                
                MultiDropdownButton.MouseButton1Click:Connect(toggleDropdown)
                
                MultiDropdownOverlay.MouseButton1Click:Connect(function()
                    if isOpen then toggleDropdown() end
                end)
                
                -- Создание элементов списка
                for i, option in ipairs(options) do
                    local OptionFrame = Instance.new("Frame")
                    OptionFrame.BackgroundTransparency = 1
                    OptionFrame.Size = UDim2.new(1, 0, 0, 30)
                    OptionFrame.ZIndex = 12
                    
                    local OptionButton = Instance.new("TextButton")
                    OptionButton.Name = option
                    OptionButton.BackgroundColor3 = currentTheme.Dropdown
                    OptionButton.BackgroundTransparency = MoonLib.Transparency
                    OptionButton:SetAttribute("BaseTransparency", 0)
                    OptionButton.BorderSizePixel = 0
                    OptionButton.Size = UDim2.new(1, -25, 1, 0)
                    OptionButton.Font = Enum.Font.Gotham
                    OptionButton.Text = option
                    OptionButton.TextColor3 = currentTheme.Text
                    OptionButton.TextTransparency = MoonLib.Transparency
                    OptionButton.TextSize = 12
                    OptionButton.TextXAlignment = Enum.TextXAlignment.Left
                    OptionButton.AutoButtonColor = false
                    OptionButton.ZIndex = 12
                    RoundCorners(OptionButton, 0)
                    
                    local OptionToggle = Instance.new("Frame")
                    OptionToggle.Name = "OptionToggle"
                    OptionToggle.BackgroundColor3 = currentTheme.Secondary
                    OptionToggle.BackgroundTransparency = MoonLib.Transparency
                    OptionToggle:SetAttribute("BaseTransparency", 0)
                    OptionToggle.BorderSizePixel = 0
                    OptionToggle.Position = UDim2.new(1, -20, 0.5, -8)
                    OptionToggle.Size = UDim2.new(0, 16, 0, 16)
                    OptionToggle.ZIndex = 12
                    RoundCorners(OptionToggle, 4)
                    
                    local OptionToggleIndicator = Instance.new("Frame")
                    OptionToggleIndicator.Name = "OptionToggleIndicator"
                    OptionToggleIndicator.BackgroundColor3 = currentTheme.Toggle
                    OptionToggleIndicator.BorderSizePixel = 0
                    OptionToggleIndicator.Position = UDim2.new(0, 2, 0, 2)
                    OptionToggleIndicator.Size = UDim2.new(1, -4, 1, -4)
                    OptionToggleIndicator.Visible = table.find(selected, option) ~= nil
                    OptionToggleIndicator.ZIndex = 13
                    RoundCorners(OptionToggleIndicator, 2)
                    
                    OptionToggleIndicator.Parent = OptionToggle
                    OptionButton.Parent = OptionFrame
                    OptionToggle.Parent = OptionFrame
                    OptionFrame.Parent = MultiDropdownList
                    
                    OptionButton.MouseEnter:Connect(function()
                        TweenService:Create(
                            OptionButton,
                            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundTransparency = MoonLib.Transparency * 0.5}
                        ):Play()
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        TweenService:Create(
                            OptionButton,
                            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundTransparency = MoonLib.Transparency}
                        ):Play()
                    end)
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        local index = table.find(selected, option)
                        if index then
                            table.remove(selected, index)
                        else
                            table.insert(selected, option)
                        end
                        OptionToggleIndicator.Visible = not OptionToggleIndicator.Visible
                        MultiDropdownValue.Text = table.concat(selected, ", ")
                        if callback then callback(selected) end
                    end)
                end
                
                MultiDropdownList.CanvasSize = UDim2.new(0, 0, 0, #options * 30)
                
                return {
                    Set = function(self, values)
                        selected = values
                        MultiDropdownValue.Text = table.concat(values, ", ")
                        -- Обновить состояние тогглов в списке
                        for _, child in ipairs(MultiDropdownList:GetChildren()) do
                            if child:IsA("Frame") and child.Name ~= "OptionToggle" then
                                local option = child:FindFirstChildOfClass("TextButton").Text
                                local toggle = child:FindFirstChild("OptionToggle")
                                if toggle then
                                    toggle:FindFirstChild("OptionToggleIndicator").Visible = table.find(values, option) ~= nil
                                end
                            end
                        end
                    end,
                    Get = function(self)
                        return selected
                    end
                }
            end
            
            -- Функция добавления текстового поля
            function section:AddInput(text, placeholder, callback)
                local InputFrame = Instance.new("Frame")
                InputFrame.BackgroundTransparency = 1
                InputFrame.Size = UDim2.new(1, 0, 0, 50)
                
                local InputLabel = Instance.new("TextLabel")
                InputLabel.Name = "InputLabel"
                InputLabel.BackgroundTransparency = 1
                InputLabel.TextTransparency = MoonLib.Transparency
                InputLabel.Position = UDim2.new(0, 0, 0, 0)
                InputLabel.Size = UDim2.new(1, 0, 0, 20)
                InputLabel.Font = Enum.Font.Gotham
                InputLabel.Text = text
                InputLabel.TextColor3 = currentTheme.Text
                InputLabel.TextSize = 12
                InputLabel.TextXAlignment = Enum.TextXAlignment.Left
                InputLabel.Parent = InputFrame
                
                local InputBox = Instance.new("TextBox")
                InputBox.Name = "InputBox"
                InputBox.BackgroundColor3 = currentTheme.Input
                InputBox.BackgroundTransparency = MoonLib.Transparency
                InputBox:SetAttribute("BaseTransparency", 0)
                InputBox.BorderSizePixel = 0
                InputBox.Position = UDim2.new(0, 0, 0, 25)
                InputBox.Size = UDim2.new(1, 0, 0, 25)
                InputBox.Font = Enum.Font.Gotham
                InputBox.PlaceholderText = placeholder or ""
                InputBox.PlaceholderColor3 = Color3.fromRGB(150, 160, 180)
                InputBox.Text = ""
                InputBox.TextColor3 = currentTheme.Text
                InputBox.TextTransparency = MoonLib.Transparency
                InputBox.TextSize = 12
                InputBox.TextXAlignment = Enum.TextXAlignment.Left
                RoundCorners(InputBox, 6)
                
                InputBox.Focused:Connect(function()
                    TweenService:Create(
                        InputBox,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundTransparency = MoonLib.Transparency * 0.5}
                    ):Play()
                end)
                
                InputBox.FocusLost:Connect(function(enterPressed)
                    TweenService:Create(
                        InputBox,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundTransparency = MoonLib.Transparency}
                    ):Play()
                    if enterPressed and callback then
                        callback(InputBox.Text)
                    end
                end)
                
                InputBox.Parent = InputFrame
                InputFrame.Parent = SectionContent
                
                return {
                    Set = function(self, value)
                        InputBox.Text = value
                    end,
                    Get = function(self)
                        return InputBox.Text
                    end
                }
            end
            
            -- Функция добавления метки
            function section:AddLabel(text)
                local LabelFrame = Instance.new("Frame")
                LabelFrame.BackgroundTransparency = 1
                LabelFrame.Size = UDim2.new(1, 0, 0, 20)
                
                local Label = Instance.new("TextLabel")
                Label.Name = "Label"
                Label.BackgroundTransparency = 1
                Label.TextTransparency = MoonLib.Transparency
                Label.Size = UDim2.new(1, 0, 1, 0)
                Label.Font = Enum.Font.Gotham
                Label.Text = text
                Label.TextColor3 = currentTheme.Text
                Label.TextSize = 12
                Label.TextXAlignment = Enum.TextXAlignment.Left
                Label.Parent = LabelFrame
                
                LabelFrame.Parent = SectionContent
                
                return {
                    SetText = function(self, newText)
                        Label.Text = newText
                    end
                }
            end
            
            -- Функция добавления цветового пикера
            function section:AddColorpicker(text, defaultColor, callback)
                local ColorpickerFrame = Instance.new("Frame")
                ColorpickerFrame.BackgroundTransparency = 1
                ColorpickerFrame.Size = UDim2.new(1, 0, 0, 50)
                
                local ColorpickerLabel = Instance.new("TextLabel")
                ColorpickerLabel.Name = "ColorpickerLabel"
                ColorpickerLabel.BackgroundTransparency = 1
                ColorpickerLabel.TextTransparency = MoonLib.Transparency
                ColorpickerLabel.Position = UDim2.new(0, 0, 0, 0)
                ColorpickerLabel.Size = UDim2.new(1, -30, 0, 20)
                ColorpickerLabel.Font = Enum.Font.Gotham
                ColorpickerLabel.Text = text
                ColorpickerLabel.TextColor3 = currentTheme.Text
                ColorpickerLabel.TextSize = 12
                ColorpickerLabel.TextXAlignment = Enum.TextXAlignment.Left
                ColorpickerLabel.Parent = ColorpickerFrame
                
                local ColorpickerButton = Instance.new("TextButton")
                ColorpickerButton.Name = "ColorpickerButton"
                ColorpickerButton.BackgroundColor3 = defaultColor or Color3.new(1, 1, 1)
                ColorpickerButton.BackgroundTransparency = MoonLib.Transparency
                ColorpickerButton:SetAttribute("BaseTransparency", 0)
                ColorpickerButton.BorderSizePixel = 0
                ColorpickerButton.Position = UDim2.new(1, -25, 0, 0)
                ColorpickerButton.Size = UDim2.new(0, 25, 0, 20)
                ColorpickerButton.Font = Enum.Font.SourceSans
                ColorpickerButton.Text = ""
                ColorpickerButton.AutoButtonColor = false
                RoundCorners(ColorpickerButton, 6)
                
                -- Здесь должна быть реализация выбора цвета
                -- (упрощенная версия без полноценного цветового пикера)
                
                ColorpickerButton.MouseButton1Click:Connect(function()
                    -- В реальной реализации здесь должно открываться окно выбора цвета
                    print("Color picker would open here")
                end)
                
                ColorpickerButton.Parent = ColorpickerFrame
                ColorpickerFrame.Parent = SectionContent
                
                return {
                    SetColor = function(self, color)
                        ColorpickerButton.BackgroundColor3 = color
                        if callback then callback(color) end
                    end,
                    GetColor = function(self)
                        return ColorpickerButton.BackgroundColor3
                    end
                }
            end
            
            -- Функция добавления бинда клавиш
            function section:AddKeybind(text, defaultKey, callback)
                local KeybindFrame = Instance.new("Frame")
                KeybindFrame.BackgroundTransparency = 1
                KeybindFrame.Size = UDim2.new(1, 0, 0, 50)
                
                local KeybindLabel = Instance.new("TextLabel")
                KeybindLabel.Name = "KeybindLabel"
                KeybindLabel.BackgroundTransparency = 1
                KeybindLabel.TextTransparency = MoonLib.Transparency
                KeybindLabel.Position = UDim2.new(0, 0, 0, 0)
                KeybindLabel.Size = UDim2.new(1, -80, 0, 20)
                KeybindLabel.Font = Enum.Font.Gotham
                KeybindLabel.Text = text
                KeybindLabel.TextColor3 = currentTheme.Text
                KeybindLabel.TextSize = 12
                KeybindLabel.TextXAlignment = Enum.TextXAlignment.Left
                KeybindLabel.Parent = KeybindFrame
                
                local KeybindButton = Instance.new("TextButton")
                KeybindButton.Name = "KeybindButton"
                KeybindButton.BackgroundColor3 = currentTheme.Secondary
                KeybindButton.BackgroundTransparency = MoonLib.Transparency
                KeybindButton:SetAttribute("BaseTransparency", 0)
                KeybindButton.BorderSizePixel = 0
                KeybindButton.Position = UDim2.new(1, -75, 0, 0)
                KeybindButton.Size = UDim2.new(0, 70, 0, 20)
                KeybindButton.Font = Enum.Font.Gotham
                KeybindButton.Text = defaultKey and defaultKey.Name or "None"
                KeybindButton.TextColor3 = currentTheme.Text
                KeybindButton.TextTransparency = MoonLib.Transparency
                KeybindButton.TextSize = 12
                KeybindButton.AutoButtonColor = false
                RoundCorners(KeybindButton, 6)
                
                local listening = false
                
                KeybindButton.MouseButton1Click:Connect(function()
                    listening = true
                    KeybindButton.Text = "..."
                    TweenService:Create(
                        KeybindButton,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundColor3 = currentTheme.Accent}
                    ):Play()
                end)
                
                local function setKey(key)
                    KeybindButton.Text = key.Name
                    TweenService:Create(
                        KeybindButton,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {BackgroundColor3 = currentTheme.Secondary}
                    ):Play()
                    listening = false
                    if callback then callback(key) end
                end
                
                UserInputService.InputBegan:Connect(function(input, processed)
                    if listening and not processed then
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            setKey(input.KeyCode)
                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                            setKey(Enum.KeyCode.MouseButton1)
                        elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                            setKey(Enum.KeyCode.MouseButton2)
                        end
                    end
                end)
                
                KeybindButton.Parent = KeybindFrame
                KeybindFrame.Parent = SectionContent
                
                return {
                    SetKey = function(self, key)
                        KeybindButton.Text = key.Name
                        if callback then callback(key) end
                    end,
                    GetKey = function(self)
                        return Enum.KeyCode[KeybindButton.Text]
                    end
                }
            end
            
            -- Функция добавления разделителя
            function section:AddDivider()
                local DividerFrame = Instance.new("Frame")
                DividerFrame.BackgroundTransparency = 1
                DividerFrame.Size = UDim2.new(1, 0, 0, 10)
                
                local DividerLine = Instance.new("Frame")
                DividerLine.BackgroundColor3 = currentTheme.Divider
                DividerLine.BackgroundTransparency = MoonLib.Transparency
                DividerLine:SetAttribute("BaseTransparency", 0)
                DividerLine.BorderSizePixel = 0
                DividerLine.Position = UDim2.new(0, 0, 0.5, 0)
                DividerLine.Size = UDim2.new(1, 0, 0, 1)
                DividerLine.Parent = DividerFrame
                
                DividerFrame.Parent = SectionContent
            end
            
            return section
        end
        
        -- Активация первой вкладки
        if #tabs == 0 then
            TabButton.BackgroundColor3 = currentTheme.Accent
            TabContent.Visible = true
        end
        
        TabButton.MouseButton1Click:Connect(function()
            for _, otherTab in pairs(tabs) do
                otherTab.TabContent.Visible = false
                otherTab.TabButton.BackgroundColor3 = currentTheme.Secondary
            end
            
            TabContent.Visible = true
            TabButton.BackgroundColor3 = currentTheme.Accent
        end)
        
        table.insert(tabs, {
            TabButton = TabButton,
            TabContent = TabContent
        })
        
        return tab
    end
    
    -- Автоматическое создание вкладки Settings с настройками
    local SettingsTab = window:AddTab("Settings")
    local InterfaceSection = SettingsTab:AddSection("Interface Settings")
    
    -- Выбор темы
    local themeDropdown = InterfaceSection:AddDropdown("Theme", {"Aurora", "Midnight"}, MoonLib.Theme, function(selected)
        MoonLib.SetTheme(selected)
        -- Здесь нужно обновить все элементы интерфейса
    end)
    
    -- Настройка прозрачности
    local transparencyToggle = InterfaceSection:AddToggle("Enable Transparency", MoonLib.Transparency > 0, function(state)
        -- Можно добавить дополнительную логику
    end)
    
    local transparencySlider = InterfaceSection:AddSlider("Transparency", 0, MoonLib.MaxTransparency * 100, MoonLib.Transparency * 100, function(value)
        MoonLib.Transparency = value / 100
        UpdateTransparency(ScreenGui, MoonLib.Transparency)
    end)
    
    -- Настройка горячей клавиши
    local keybindInput = InterfaceSection:AddKeybind("Minimize Keybind", MoonLib.WindowMinimizeKey, function(key)
        MoonLib.WindowMinimizeKey = key
    end)
    
    -- Управление конфигурациями
    local ConfigSection = SettingsTab:AddSection("Configurations")
    
    local configNameInput = ConfigSection:AddInput("Config Name", "Enter config name")
    
    local saveConfigButton = ConfigSection:AddButton("Save Config", function()
        local configName = configNameInput:Get()
        if configName and configName ~= "" then
            MoonLib.SaveConfig(configName)
            configDropdown:SetValues(table.keys(MoonLib.Configs))
        end
    end)
    
    local configDropdown = ConfigSection:AddDropdown("Select Config", table.keys(MoonLib.Configs), MoonLib.CurrentConfig, function(selected)
        -- Можно добавить предпросмотр конфига
    end)
    
    local loadConfigButton = ConfigSection:AddButton("Load Config", function()
        local selectedConfig = configDropdown:Get()
        if selectedConfig then
            MoonLib.LoadConfig(selectedConfig)
            -- Обновить все элементы интерфейса в соответствии с новой конфигурацией
            themeDropdown:Set(MoonLib.Theme)
            transparencyToggle:Set(MoonLib.Transparency > 0)
            transparencySlider:Set(MoonLib.Transparency * 100)
            keybindInput:SetKey(MoonLib.WindowMinimizeKey)
        end
    end)
    
    function window:Show()
        ScreenGui.Parent = game:GetService("CoreGui")
    end
    
    function window:Hide()
        ScreenGui.Parent = nil
    end
    
    function window:Destroy()
        ScreenGui:Destroy()
    end
    
    function window:SetMinimizeKey(keyCode)
        MoonLib.WindowMinimizeKey = keyCode
    end
    
    return window
end

-- Вспомогательная функция для получения ключей таблицы
function table.keys(tbl)
    local keys = {}
    for k in pairs(tbl) do
        table.insert(keys, k)
    end
    return keys
end

return MoonLib
