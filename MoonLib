-- MoonLib v2.0 - Универсальная UI библиотека для PC и мобильных устройств
local MoonLib = {}
MoonLib.__index = MoonLib

-- Определяем тип устройства
local isMobile = (function()
    if game:GetService("UserInputService").TouchEnabled and not game:GetService("UserInputService").KeyboardEnabled then
        return true
    end
    return false
end)()

-- Инициализация
function MoonLib:Init(options)
    options = options or {}
    local self = setmetatable({
        Theme = options.Theme or "Dark",
        AccentColor = options.AccentColor or Color3.fromRGB(136, 114, 255),
        Transparency = options.Transparency or (isMobile and 0.95 or 0.85),
        Version = "2.0",
        _elements = {},
        _notifications = {},
        _keybinds = {},
        _draggableElements = {},
        IsMobile = isMobile,
        ScreenGui = nil
    }, MoonLib)
    
    self:CreateUI()
    return self
end

-- Создание основного UI
function MoonLib:CreateUI()
    -- Создаем основной ScreenGui с оптимизацией для мобильных устройств
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MoonLibUI"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.DisplayOrder = 999
    
    if self.IsMobile then
        screenGui.IgnoreGuiInset = true
    end
    
    self.ScreenGui = screenGui
    screenGui.Parent = game:GetService("CoreGui") or game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    
    -- Создаем контейнер для уведомлений
    local notificationsFrame = Instance.new("Frame")
    notificationsFrame.Name = "Notifications"
    notificationsFrame.BackgroundTransparency = 1
    notificationsFrame.Size = UDim2.new(1, 0, 1, 0)
    notificationsFrame.Parent = screenGui
    
    -- Система для перемещаемых элементов
    local dragController = Instance.new("Frame")
    dragController.Name = "DragController"
    dragController.BackgroundTransparency = 1
    dragController.Size = UDim2.new(1, 0, 1, 0)
    dragController.Parent = screenGui
    
    self:SetupDragController(dragController)
end

-- Система перемещения элементов
function MoonLib:SetupDragController(controller)
    local UserInputService = game:GetService("UserInputService")
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        for _, element in pairs(self._draggableElements) do
            if element.Dragging then
                local newPos = UDim2.new(
                    startPos.X.Scale, 
                    startPos.X.Offset + delta.X, 
                    startPos.Y.Scale, 
                    startPos.Y.Offset + delta.Y
                )
                element.Instance.Position = newPos
                element.Position = newPos
            end
        end
    end
    
    controller.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = nil
            
            -- Проверяем, какой элемент перемещаем
            for _, element in pairs(self._draggableElements) do
                if element.HitTest(input.Position) then
                    element.Dragging = true
                    startPos = element.Instance.Position
                    break
                end
            end
        end
    end)
    
    controller.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            dragInput = input
        end
    end)
    
    controller.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            for _, element in pairs(self._draggableElements) do
                element.Dragging = false
            end
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end)
end

-- Создание перемещаемой минимизированной кнопки
function MoonLib:CreateMinimizeButton(windowInstance, options)
    options = options or {}
    local button = Instance.new("ImageButton")
    button.Name = "MinimizeButton"
    button.BackgroundTransparency = 1
    button.Image = "rbxassetid://" .. (options.ImageId or 10734969510) -- Иконка луны по умолчанию
    button.Size = UDim2.new(0, 40, 0, 40)
    button.Position = options.Position or UDim2.new(0.5, -20, 0, 10)
    button.ZIndex = 100
    button.Parent = self.ScreenGui
    
    -- Настройки UI
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(options.CornerRadius or 0.5, 0)
    uiCorner.Parent = button
    
    local uiAspectRatio = Instance.new("UIAspectRatioConstraint")
    uiAspectRatio.AspectRatio = options.AspectRatio or 1
    uiAspectRatio.Parent = button
    
    local uiScale = Instance.new("UIScale")
    uiScale.Scale = options.Scale or 1
    uiScale.Parent = button
    
    -- Функционал кнопки
    button.MouseButton1Click:Connect(function()
        windowInstance:Toggle()
    end)
    
    -- Добавляем возможность перемещения
    local draggableElement = {
        Instance = button,
        Position = button.Position,
        Dragging = false,
        HitTest = function(self, position)
            local buttonPos = self.Instance.AbsolutePosition
            local buttonSize = self.Instance.AbsoluteSize
            return position.X >= buttonPos.X and position.X <= buttonPos.X + buttonSize.X and
                   position.Y >= buttonPos.Y and position.Y <= buttonPos.Y + buttonSize.Y
        end
    }
    
    table.insert(self._draggableElements, draggableElement)
    
    -- Возвращаем объект для управления
    local buttonObj = {
        Instance = button,
        SetImage = function(imageId)
            button.Image = "rbxassetid://" .. imageId
        end,
        SetSize = function(size)
            button.Size = size
        end,
        SetPosition = function(position)
            button.Position = position
            draggableElement.Position = position
        end,
        SetCornerRadius = function(radius)
            uiCorner.CornerRadius = UDim.new(radius, 0)
        end,
        SetAspectRatio = function(ratio)
            uiAspectRatio.AspectRatio = ratio
        end,
        SetScale = function(scale)
            uiScale.Scale = scale
        end,
        Destroy = function()
            button:Destroy()
            for i, element in ipairs(self._draggableElements) do
                if element.Instance == button then
                    table.remove(self._draggableElements, i)
                    break
                end
            end
        end
    }
    
    return buttonObj
end

-- Окно (оптимизированное для мобильных устройств)
function MoonLib:Window(options)
    options = options or {}
    local windowFrame = Instance.new("Frame")
    windowFrame.Name = "Window"
    windowFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    windowFrame.BackgroundTransparency = self.Transparency
    windowFrame.Size = options.Size or UDim2.new(0, 500, 0, 400)
    windowFrame.Position = options.Position or (self.IsMobile and UDim2.new(0.5, -250, 0.5, -200) or UDim2.new(0.3, 0, 0.3, 0))
    windowFrame.ClipsDescendants = true
    
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 8)
    uiCorner.Parent = windowFrame
    
    local window = {
        Instance = windowFrame,
        Title = options.Title or "MoonLib Window",
        Size = windowFrame.Size,
        Position = windowFrame.Position,
        _tabs = {},
        _isOpen = false,
        _minimizeButton = nil
    }
    
    -- Создаем кнопку минимизации
    window._minimizeButton = self:CreateMinimizeButton(window, {
        ImageId = 10734969510, -- Иконка луны
        Position = UDim2.new(0, 10, 0, 10),
        CornerRadius = 0.5,
        AspectRatio = 1,
        Scale = 1
    })
    
    -- Реализация остальных методов окна (как в предыдущей версии)
    -- ...
    
    windowFrame.Parent = self.ScreenGui
    table.insert(self._elements, window)
    return window
end

-- Остальные элементы UI (аналогично предыдущей версии, но с оптимизацией для мобильных устройств)
-- ...

return MoonLib
