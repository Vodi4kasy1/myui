-- MoonLib V2 UI Library
-- Версия 2.0
-- Вдохновлено VisionLibV2, Orion UI, Fluent UI

if game:GetService("CoreGui"):FindFirstChild("MoonLib") then
    game:GetService("CoreGui"):FindFirstChild("MoonLib"):Destroy()
end

local MoonLib = {}
MoonLib.__index = MoonLib

-- Конфигурация
local config = {
    theme = "dark",
    accentColor = Color3.fromRGB(0, 170, 255),
    font = Enum.Font.Gotham,
    animationSpeed = 0.25,
    blurBackground = false
}

-- Локальные переменные
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Утилиты
local function Create(class, props)
    local instance = Instance.new(class)
    for prop, value in pairs(props) do
        if prop ~= "Parent" then
            if pcall(function() return instance[prop] end) then
                instance[prop] = value
            end
        end
    end
    if props.Parent then
        instance.Parent = props.Parent
    end
    return instance
end

local function Tween(object, properties, duration, style, direction)
    local tweenInfo = TweenInfo.new(
        duration or config.animationSpeed,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Основные функции
function MoonLib:CreateWindow(options)
    options = options or {}
    local title = options.Title or "MoonLib V2"
    local size = options.Size or Vector2.new(500, 350)
    local autoHide = options.AutoHide or false
    local position = options.Position or UDim2.new(0.5, -size.X/2, 0.5, -size.Y/2)
    
    -- Основной экран
    local screenGui = Create("ScreenGui", {
        Name = "MoonLib",
        Parent = game:GetService("CoreGui"),
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    })
    
    -- Размытие фона (если включено)
    local blurEffect
    if config.blurBackground then
        blurEffect = Create("BlurEffect", {
            Name = "Blur",
            Size = 10,
            Parent = screenGui
        })
    end
    
    -- Главный фрейм
    local mainFrame = Create("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, size.X, 0, size.Y),
        Position = position,
        BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(25, 25, 25) or Color3.fromRGB(240, 240, 240),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ClipsDescendants = true,
        Parent = screenGui
    })
    
    -- Скругление углов
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = mainFrame
    })
    
    -- Тень
    local shadow = Create("ImageLabel", {
        Name = "Shadow",
        Image = "rbxassetid://1316045217",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        Size = UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        BackgroundTransparency = 1,
        Parent = mainFrame,
        ZIndex = -1
    })
    
    -- Заголовок
    local titleBar = Create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(35, 35, 35) or Color3.fromRGB(220, 220, 220),
        BorderSizePixel = 0,
        Parent = mainFrame
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = titleBar
    })
    
    local titleText = Create("TextLabel", {
        Name = "Title",
        Text = title,
        Font = config.font,
        TextSize = 16,
        TextColor3 = config.theme == "dark" and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(0, 0, 0),
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Parent = titleBar
    })
    
    -- Кнопка закрытия
    local closeButton = Create("ImageButton", {
        Name = "CloseButton",
        Image = "rbxassetid://3926305904",
        ImageRectOffset = Vector2.new(284, 4),
        ImageRectSize = Vector2.new(24, 24),
        ImageColor3 = Color3.fromRGB(200, 200, 200),
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -32, 0.5, -12),
        Size = UDim2.new(0, 24, 0, 24),
        Parent = titleBar
    })
    
    -- Эффекты при наведении
    closeButton.MouseEnter:Connect(function()
        Tween(closeButton, {ImageColor3 = Color3.fromRGB(255, 255, 255)}, 0.1)
    end)
    
    closeButton.MouseLeave:Connect(function()
        Tween(closeButton, {ImageColor3 = Color3.fromRGB(200, 200, 200)}, 0.1)
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        Tween(mainFrame, {Size = UDim2.new(0, size.X, 0, 0)}, 0.2):Wait()
        Tween(mainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.2):Wait()
        screenGui:Destroy()
        if blurEffect then
            blurEffect:Destroy()
        end
    end)
    
    -- Drag функционал
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function Update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
    
    -- Авто-скрытие
    if autoHide then
        local minimized = false
        local minimizeButton = Create("ImageButton", {
            Name = "MinimizeButton",
            Image = "rbxassetid://3926305904",
            ImageRectOffset = Vector2.new(364, 284),
            ImageRectSize = Vector2.new(24, 24),
            ImageColor3 = Color3.fromRGB(200, 200, 200),
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -64, 0.5, -12),
            Size = UDim2.new(0, 24, 0, 24),
            Parent = titleBar
        })
        
        minimizeButton.MouseEnter:Connect(function()
            Tween(minimizeButton, {ImageColor3 = Color3.fromRGB(255, 255, 255)}, 0.1)
        end)
        
        minimizeButton.MouseLeave:Connect(function()
            Tween(minimizeButton, {ImageColor3 = Color3.fromRGB(200, 200, 200)}, 0.1)
        end)
        
        minimizeButton.MouseButton1Click:Connect(function()
            minimized = not minimized
            if minimized then
                minimizeButton.ImageRectOffset = Vector2.new(404, 284)
                Tween(mainFrame, {Size = UDim2.new(mainFrame.Size.X.Scale, mainFrame.Size.X.Offset, 0, 36)}, 0.2)
            else
                minimizeButton.ImageRectOffset = Vector2.new(364, 284)
                Tween(mainFrame, {Size = UDim2.new(0, size.X, 0, size.Y)}, 0.2)
            end
        end)
    end
    
    -- Контейнер для вкладок
    local tabContainer = Create("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(1, 0, 1, -36),
        Position = UDim2.new(0, 0, 0, 36),
        BackgroundTransparency = 1,
        Parent = mainFrame
    })
    
    -- Контейнер для кнопок вкладок
    local tabButtons = Create("Frame", {
        Name = "TabButtons",
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundTransparency = 1,
        Parent = mainFrame
    })
    
    local uiListLayout = Create("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = tabButtons
    })
    
    -- Индикатор активной вкладки
    local tabIndicator = Create("Frame", {
        Name = "TabIndicator",
        Size = UDim2.new(0, 0, 0, 3),
        Position = UDim2.new(0, 0, 1, -3),
        BackgroundColor3 = config.accentColor,
        Parent = tabButtons
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = tabIndicator
    })
    
    -- Анимация при появлении
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    Tween(mainFrame, {Size = UDim2.new(0, size.X, 0, size.Y)}, 0.3)
    
    -- Возвращаемые методы
    local window = {}
    window.gui = screenGui
    window.mainFrame = mainFrame
    
    function window:Notification(options)
        options = options or {}
        local title = options.Title or "Notification"
        local text = options.Text or "Hello from MoonLib V2!"
        local duration = options.Duration or 5
        local callback = options.Callback
        
        local notification = Create("Frame", {
            Name = "Notification",
            Size = UDim2.new(0, 300, 0, 100),
            Position = UDim2.new(1, -320, 1, -120),
            BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(35, 35, 35) or Color3.fromRGB(220, 220, 220),
            Parent = screenGui,
            ZIndex = 100
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = notification
        })
        
        Create("UIStroke", {
            Color = config.accentColor,
            Thickness = 1,
            Parent = notification
        })
        
        local titleLabel = Create("TextLabel", {
            Text = title,
            Font = config.font,
            TextSize = 16,
            TextColor3 = config.accentColor,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 10),
            Size = UDim2.new(1, -30, 0, 20),
            Parent = notification
        })
        
        local textLabel = Create("TextLabel", {
            Text = text,
            Font = config.font,
            TextSize = 14,
            TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 35),
            Size = UDim2.new(1, -30, 1, -45),
            Parent = notification
        })
        
        local closeButton = Create("ImageButton", {
            Image = "rbxassetid://3926305904",
            ImageRectOffset = Vector2.new(284, 4),
            ImageRectSize = Vector2.new(24, 24),
            ImageColor3 = Color3.fromRGB(200, 200, 200),
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -30, 0, 5),
            Size = UDim2.new(0, 20, 0, 20),
            Parent = notification
        })
        
        closeButton.MouseButton1Click:Connect(function()
            Tween(notification, {Position = UDim2.new(1, -320, 1, 120)}, 0.2):Wait()
            notification:Destroy()
            if callback then callback() end
        end)
        
        notification.Position = UDim2.new(1, -320, 1, 120)
        Tween(notification, {Position = UDim2.new(1, -320, 1, -120)}, 0.3)
        
        if duration > 0 then
            task.delay(duration, function()
                if notification and notification.Parent then
                    Tween(notification, {Position = UDim2.new(1, -320, 1, 120)}, 0.2):Wait()
                    notification:Destroy()
                    if callback then callback() end
                end
            end)
        end
    end
    
    function window:CreateTab(options)
        options = options or {}
        local name = options.Name or "Tab"
        local icon = options.Icon
        
        local tabButton = Create("TextButton", {
            Name = name .. "TabButton",
            Text = name,
            Font = config.font,
            TextSize = 14,
            TextColor3 = config.theme == "dark" and Color3.fromRGB(180, 180, 180) or Color3.fromRGB(80, 80, 80),
            BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(35, 35, 35) or Color3.fromRGB(220, 220, 220),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 80, 1, 0),
            Parent = tabButtons
        })
        
        local tabFrame = Create("ScrollingFrame", {
            Name = name .. "Tab",
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1,
            Visible = false,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = config.accentColor,
            Parent = tabContainer
        })
        
        Create("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Parent = tabFrame
        })
        
        Create("UIPadding", {
            PaddingTop = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 12),
            PaddingRight = UDim.new(0, 12),
            Parent = tabFrame
        })
        
        -- Выбор вкладки
        tabButton.MouseButton1Click:Connect(function()
            for _, child in ipairs(tabContainer:GetChildren()) do
                if child:IsA("ScrollingFrame") then
                    child.Visible = false
                end
            end
            tabFrame.Visible = true
            
            for _, child in ipairs(tabButtons:GetChildren()) do
                if child:IsA("TextButton") then
                    Tween(child, {TextColor3 = config.theme == "dark" and Color3.fromRGB(180, 180, 180) or Color3.fromRGB(80, 80, 80)}, 0.1)
                end
            end
            Tween(tabButton, {TextColor3 = config.accentColor}, 0.1)
            
            -- Анимация индикатора
            Tween(tabIndicator, {
                Position = UDim2.new(tabButton.Position.X.Scale, tabButton.Position.X.Offset, 1, -3),
                Size = UDim2.new(0, tabButton.AbsoluteSize.X, 0, 3)
            }, 0.2)
        end)
        
        -- Активируем первую вкладку
        if #tabButtons:GetChildren() == 3 then -- 1 кнопка + UIListLayout + индикатор
            tabButton.TextColor3 = config.accentColor
            tabFrame.Visible = true
            tabIndicator.Size = UDim2.new(0, tabButton.AbsoluteSize.X, 0, 3)
        end
        
        -- Возвращаемые методы для вкладки
        local tab = {}
        
        function tab:CreateSection(options)
            options = options or {}
            local name = options.Name or "Section"
            local size = options.Size or UDim2.new(1, -24, 0, 150)
            
            local section = Create("Frame", {
                Name = name .. "Section",
                Size = size,
                BackgroundTransparency = 1,
                Parent = tabFrame
            })
            
            local sectionTitle = Create("TextLabel", {
                Name = "Title",
                Text = name,
                Font = config.font,
                TextSize = 14,
                TextColor3 = config.accentColor,
                TextXAlignment = Enum.TextXAlignment.Left,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Parent = section
            })
            
            local sectionFrame = Create("Frame", {
                Name = "Content",
                Size = UDim2.new(1, 0, 1, -25),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(35, 35, 35) or Color3.fromRGB(230, 230, 230),
                Parent = section
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = sectionFrame
            })
            
            Create("UIStroke", {
                Color = config.theme == "dark" and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(180, 180, 180),
                Thickness = 1,
                Parent = sectionFrame
            })
            
            local contentLayout = Create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8),
                Parent = sectionFrame
            })
            
            Create("UIPadding", {
                PaddingTop = UDim.new(0, 8),
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                Parent = sectionFrame
            })
            
            -- Возвращаемые методы для секции
            local sectionObj = {}
            
            function sectionObj:CreateButton(options)
                options = options or {}
                local name = options.Name or "Button"
                local callback = options.Callback or function() end
                
                local button = Create("TextButton", {
                    Name = name .. "Button",
                    Text = name,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(0, 0, 0),
                    BackgroundColor3 = config.accentColor,
                    Size = UDim2.new(1, 0, 0, 32),
                    Parent = sectionFrame
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = button
                })
                
                -- Эффекты при наведении
                button.MouseEnter:Connect(function()
                    Tween(button, {BackgroundColor3 = Color3.fromRGB(
                        math.floor(config.accentColor.R * 255 + 20),
                        math.floor(config.accentColor.G * 255 + 20),
                        math.floor(config.accentColor.B * 255 + 20)
                    )}, 0.1)
                end)
                
                button.MouseLeave:Connect(function()
                    Tween(button, {BackgroundColor3 = config.accentColor}, 0.1)
                end)
                
                button.MouseButton1Click:Connect(function()
                    Tween(button, {BackgroundColor3 = Color3.fromRGB(
                        math.floor(config.accentColor.R * 255 + 40),
                        math.floor(config.accentColor.G * 255 + 40),
                        math.floor(config.accentColor.B * 255 + 40)
                    )}, 0.1)
                    Tween(button, {BackgroundColor3 = config.accentColor}, 0.1)
                    callback()
                end)
                
                return button
            end
            
            function sectionObj:CreateToggle(options)
                options = options or {}
                local name = options.Name or "Toggle"
                local default = options.Default or false
                local callback = options.Callback or function() end
                
                local toggle = Create("Frame", {
                    Name = name .. "Toggle",
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 1,
                    Parent = sectionFrame
                })
                
                local toggleButton = Create("TextButton", {
                    Name = "ToggleButton",
                    Text = "",
                    Size = UDim2.new(0, 50, 0, 25),
                    Position = UDim2.new(1, -55, 0.5, -12.5),
                    BackgroundColor3 = default and config.accentColor or (config.theme == "dark" and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(180, 180, 180)),
                    Parent = toggle
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 12),
                    Parent = toggleButton
                })
                
                local toggleIndicator = Create("Frame", {
                    Name = "Indicator",
                    Size = UDim2.new(0, 21, 0, 21),
                    Position = default and UDim2.new(1, -23, 0.5, -10.5) or UDim2.new(0, 2, 0.5, -10.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = toggleButton
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 12),
                    Parent = toggleIndicator
                })
                
                local toggleLabel = Create("TextLabel", {
                    Name = "Label",
                    Text = name,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -60, 1, 0),
                    Position = UDim2.new(0, 0, 0, 0),
                    Parent = toggle
                })
                
                local state = default
                
                local function UpdateToggle()
                    if state then
                        Tween(toggleButton, {BackgroundColor3 = config.accentColor}, 0.2)
                        Tween(toggleIndicator, {Position = UDim2.new(1, -23, 0.5, -10.5)}, 0.2)
                    else
                        Tween(toggleButton, {BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(180, 180, 180))}, 0.2)
                        Tween(toggleIndicator, {Position = UDim2.new(0, 2, 0.5, -10.5)}, 0.2)
                    end
                    callback(state)
                end
                
                toggleButton.MouseButton1Click:Connect(function()
                    state = not state
                    UpdateToggle()
                end)
                
                function sectionObj:GetToggleState()
                    return state
                end
                
                function sectionObj:SetToggleState(newState)
                    state = newState
                    UpdateToggle()
                end
                
                return sectionObj
            end
            
            function sectionObj:CreateSlider(options)
                options = options or {}
                local name = options.Name or "Slider"
                local min = options.Min or 0
                local max = options.Max or 100
                local default = options.Default or min
                local callback = options.Callback or function() end
                local precise = options.Precise or false
                local suffix = options.Suffix or ""
                
                local slider = Create("Frame", {
                    Name = name .. "Slider",
                    Size = UDim2.new(1, 0, 0, 50),
                    BackgroundTransparency = 1,
                    Parent = sectionFrame
                })
                
                local sliderLabel = Create("TextLabel", {
                    Name = "Label",
                    Text = name,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Parent = slider
                })
                
                local sliderValue = Create("TextLabel", {
                    Name = "Value",
                    Text = tostring(default) .. suffix,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.accentColor,
                    TextXAlignment = Enum.TextXAlignment.Right,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Parent = slider
                })
                
                local sliderTrack = Create("Frame", {
                    Name = "Track",
                    Size = UDim2.new(1, 0, 0, 5),
                    Position = UDim2.new(0, 0, 1, -15),
                    BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(180, 180, 180)),
                    Parent = slider
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 3),
                    Parent = sliderTrack
                })
                
                local sliderFill = Create("Frame", {
                    Name = "Fill",
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                    BackgroundColor3 = config.accentColor,
                    Parent = sliderTrack
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 3),
                    Parent = sliderFill
                })
                
                local sliderThumb = Create("Frame", {
                    Name = "Thumb",
                    Size = UDim2.new(0, 15, 0, 15),
                    Position = UDim2.new((default - min) / (max - min), -7.5, 0.5, -7.5),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Parent = sliderTrack
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 7.5),
                    Parent = sliderThumb
                })
                
                Create("UIStroke", {
                    Color = config.accentColor,
                    Thickness = 2,
                    Parent = sliderThumb
                })
                
                local dragging = false
                local currentValue = default
                
                local function UpdateSlider(value)
                    value = math.clamp(value, min, max)
                    currentValue = precise and value or math.floor(value)
                    sliderValue.Text = tostring(currentValue) .. suffix
                    local ratio = (currentValue - min) / (max - min)
                    Tween(sliderFill, {Size = UDim2.new(ratio, 0, 1, 0)}, 0.1)
                    Tween(sliderThumb, {Position = UDim2.new(ratio, -7.5, 0.5, -7.5)}, 0.1)
                    callback(currentValue)
                end
                
                sliderTrack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        local position = input.Position.X / sliderTrack.AbsoluteSize.X
                        UpdateSlider(min + (max - min) * position)
                    end
                end)
                
                sliderTrack.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local position = input.Position.X - sliderTrack.AbsolutePosition.X
                        position = math.clamp(position, 0, sliderTrack.AbsoluteSize.X)
                        UpdateSlider(min + (max - min) * (position / sliderTrack.AbsoluteSize.X))
                    end
                end)
                
                function sectionObj:GetSliderValue()
                    return currentValue
                end
                
                function sectionObj:SetSliderValue(value)
                    UpdateSlider(value)
                end
                
                return sectionObj
            end
            
            function sectionObj:CreateDropdown(options)
                options = options or {}
                local name = options.Name or "Dropdown"
                local list = options.List or {}
                local default = options.Default or nil
                local callback = options.Callback or function() end
                
                local dropdown = Create("Frame", {
                    Name = name .. "Dropdown",
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 1,
                    Parent = sectionFrame
                })
                
                local dropdownLabel = Create("TextLabel", {
                    Name = "Label",
                    Text = name,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -130, 1, 0),
                    Parent = dropdown
                })
                
                local dropdownButton = Create("TextButton", {
                    Name = "Button",
                    Text = default or "Select...",
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(200, 200, 200)),
                    Size = UDim2.new(0, 120, 1, 0),
                    Position = UDim2.new(1, -120, 0, 0),
                    Parent = dropdown
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = dropdownButton
                })
                
                local dropdownFrame = Create("ScrollingFrame", {
                    Name = "DropdownFrame",
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 1, 5),
                    BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(210, 210, 210)),
                    ScrollBarThickness = 4,
                    ScrollBarImageColor3 = config.accentColor,
                    Visible = false,
                    Parent = dropdown
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = dropdownFrame
                })
                
                Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = dropdownFrame
                })
                
                local opened = false
                local selected = default
                
                local function UpdateDropdown()
                    if opened then
                        dropdownFrame.Visible = true
                        Tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, math.min(#list * 30, 150))}, 0.2)
                    else
                        Tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.2):Wait()
                        dropdownFrame.Visible = false
                    end
                end
                
                local function SelectItem(item)
                    selected = item
                    dropdownButton.Text = item
                    opened = false
                    UpdateDropdown()
                    callback(item)
                end
                
                dropdownButton.MouseButton1Click:Connect(function()
                    opened = not opened
                    UpdateDropdown()
                end)
                
                for _, item in ipairs(list) do
                    local option = Create("TextButton", {
                        Name = item .. "Option",
                        Text = item,
                        Font = config.font,
                        TextSize = 14,
                        TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                        BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(210, 210, 210)),
                        Size = UDim2.new(1, -10, 0, 30),
                        Position = UDim2.new(0, 5, 0, 0),
                        Parent = dropdownFrame
                    })
                    
                    Create("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = option
                    })
                    
                    option.MouseButton1Click:Connect(function()
                        SelectItem(item)
                    end)
                end
                
                function sectionObj:GetSelected()
                    return selected
                end
                
                function sectionObj:SetSelected(item)
                    if table.find(list, item) then
                        SelectItem(item)
                    end
                end
                
                return sectionObj
            end
            
            function sectionObj:CreateLabel(options)
                options = options or {}
                local text = options.Text or "Label"
                local color = options.Color or (config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50)
                local align = options.Align or Enum.TextXAlignment.Left
                
                local label = Create("TextLabel", {
                    Name = "Label",
                    Text = text,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = color,
                    TextXAlignment = align,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Parent = sectionFrame
                })
                
                return label
            end
            
            function sectionObj:CreateTextBox(options)
                options = options or {}
                local name = options.Name or "Text Box"
                local default = options.Default or ""
                local placeholder = options.Placeholder or "Type here..."
                local callback = options.Callback or function() end
                local clearOnFocus = options.ClearOnFocus or false
                
                local textBoxFrame = Create("Frame", {
                    Name = name .. "TextBox",
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 1,
                    Parent = sectionFrame
                })
                
                local textBoxLabel = Create("TextLabel", {
                    Name = "Label",
                    Text = name,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -130, 1, 0),
                    Parent = textBoxFrame
                })
                
                local textBox = Create("TextBox", {
                    Name = "TextBox",
                    Text = default,
                    PlaceholderText = placeholder,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(200, 200, 200)),
                    Size = UDim2.new(0, 120, 1, 0),
                    Position = UDim2.new(1, -120, 0, 0),
                    Parent = textBoxFrame
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = textBox
                })
                
                textBox.Focused:Connect(function()
                    if clearOnFocus then
                        textBox.Text = ""
                    end
                end)
                
                textBox.FocusLost:Connect(function()
                    callback(textBox.Text)
                end)
                
                function sectionObj:GetText()
                    return textBox.Text
                end
                
                function sectionObj:SetText(text)
                    textBox.Text = text
                end
                
                return sectionObj
            end
            
            function sectionObj:CreateKeybind(options)
                options = options or {}
                local name = options.Name or "Keybind"
                local default = options.Default or Enum.KeyCode.Unknown
                local callback = options.Callback or function() end
                local allowMouse = options.AllowMouse or false
                
                local keybindFrame = Create("Frame", {
                    Name = name .. "Keybind",
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 1,
                    Parent = sectionFrame
                })
                
                local keybindLabel = Create("TextLabel", {
                    Name = "Label",
                    Text = name,
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -130, 1, 0),
                    Parent = keybindFrame
                })
                
                local keybindButton = Create("TextButton", {
                    Name = "KeybindButton",
                    Text = tostring(default):gsub("Enum.KeyCode.", ""),
                    Font = config.font,
                    TextSize = 14,
                    TextColor3 = config.theme == "dark" and Color3.fromRGB(220, 220, 220) or Color3.fromRGB(50, 50, 50),
                    BackgroundColor3 = config.theme == "dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(200, 200, 200)),
                    Size = UDim2.new(0, 120, 1, 0),
                    Position = UDim2.new(1, -120, 0, 0),
                    Parent = keybindFrame
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = keybindButton
                })
                
                local listening = false
                local currentKey = default
                
                local function UpdateKeybind(key)
                    currentKey = key
                    keybindButton.Text = tostring(key):gsub("Enum.KeyCode.", "")
                    callback(key)
                end
                
                keybindButton.MouseButton1Click:Connect(function()
                    listening = true
                    keybindButton.Text = "..."
                end)
                
                UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if listening and not gameProcessed then
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            UpdateKeybind(input.KeyCode)
                            listening = false
                        elseif allowMouse and input.UserInputType == Enum.UserInputType.MouseButton1 then
                            UpdateKeybind(Enum.KeyCode.MouseButton1)
                            listening = false
                        elseif allowMouse and input.UserInputType == Enum.UserInputType.MouseButton2 then
                            UpdateKeybind(Enum.KeyCode.MouseButton2)
                            listening = false
                        end
                    end
                end)
                
                function sectionObj:GetKeybind()
                    return currentKey
                end
                
                function sectionObj:SetKeybind(key)
                    UpdateKeybind(key)
                end
                
                return sectionObj
            end
            
            return sectionObj
        end
        
        return tab
    end
    
    return window
end

-- Функция для загрузки библиотеки
return MoonLib
